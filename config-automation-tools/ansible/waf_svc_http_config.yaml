---
### Based on Barracuda WAF REST API version 3###
### This playbook can be used to setup a service using the Barracuda WAF REST APIv3,
### while also creating the complementing configuration by adding a security policy, a web scraping policy and 
### a URL policy that binds the web scraping policy. 
### when the username and password is provided in the script

### WAF DETAILS ###
- hosts: localhost
  tasks:
  - name: Set WAF URL
    set_fact:
      waf_url: '10.36.73.231:8000/restapi/v3'
      service_name: 'Service_08'
      service_ip: '10.36.73.222'
      service_port: '1111'
      server_ip: '10.36.73.242'
      server_port: '80'
      waf_user: 'admin'
      waf_password: 'admin'

### WAF LOGIN TOKEN GENERATION ###
  - name: Getting the login token
    uri:
      url: http://{{ waf_url }}/login
      method: POST
      body: '{"username":"{{ waf_user }}", "password":"{{ waf_password }}"}'
      body_format: json
      headers:
        Content-Type: "application/json"
    register: token
  - debug:
      msg: "{{token.json}}"

### GET services
  - name: Getting service information
    uri:
      url: http://{{ waf_url }}/services/{{ service_name }}?groups=Service&category=operational&parameters=status
      method: GET
      user: "{{ token.json.token }}"
      password: ""
      force_basic_auth: yes
      headers:
        Content-Type: "application/json"
      status_code: 200,404
    register: services  
  - name: debug
    debug:
      var: services
  
### WAF HTTP Service
  - name: Creating a HTTP Service
    uri:
      url: http://{{ waf_url }}/services
      method: POST
      user: "{{ token.json.token }}"
      password: ""
      force_basic_auth: yes
      body: '{"name":"{{ service_name }}", "ip-address":"{{ service_ip }}", "port":"{{ service_port }}", "type":"HTTP", "address-version":"ipv4", "vsite":"default", "group":"default"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 201, 404, 406
      timeout: 60
    register: svcname
  - debug:
      msg: "{{svcname.json}}"
    when:
      - services.status == 404

### WAF Security_Policy
  - name: Creating a Security Policy
    uri:
      url: http://{{ waf_url }}/security-policies
      method: POST
      user: "{{ token.json.token }}"
      password: ""
      force_basic_auth: yes
      body: '{"based-on": "oracle", "name": "{{ service_name }}"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 201, 404, 406
      timeout: 90
    register: sec_policy
  - debug:
      msg: "{{ sec_policy.json }}"

### WAF Service updated with the new security policy
  - name: Editing the above service and binding a different security policy
    uri:
      url: http://{{ waf_url }}/services/{{ service_name }}/basic-security
      method: PUT
      user: "{{ token.json.token }}"
      password: ""
      force_basic_auth: yes
      body: '{"web-firewall-policy": "{{ service_name }}"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 200, 404, 406
      timeout: 60
    register: svcname
  - debug:
      msg: "{{svcname.json}}"
    
### Backend Server for the service
  - name: Creating the backend server for the service
    uri:
      url: http://{{ waf_url }}/services/{{ service_name }}/servers
      method: POST
      user: "{{ token.json.token}}"
      password: ""
      force_basic_auth: yes
      body: '{"name":"{{ service_name }}-svr-01", "ip-address":"{{ server_ip }}", "port":"{{ server_port }}", "identifier":"IP Address", "status":"In Service"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 201, 406, 404
      timeout: 60
    register: svrname
  - debug:
     msg: "{{ svrname.json}}"

### Web Scraping Policy
  - name: Creating the web scraping policy for the service
    uri:
      url: http://{{ waf_url }}/web-scraping-policies
      method: POST
      user: "{{ token.json.token}}"
      password: ""
      force_basic_auth: yes
      body: '{"name":"{{ service_name }}_web_scraping_policy", "insert-hidden-links": "No", "insert-javascript-in-response": "Yes", "detect-mouse-event": "Yes", "insert-disallowed-urls": "Yes", "insert-delay": "No"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 201, 404, 406
      timeout: 60
    register: webscraping_name
  - debug:
     msg: "{{ webscraping_name.json}}"

### URL Policy to bind the previously created web scraping policy
  - name: Creating a URL Policy to associate the web scraping policy
    uri:
      url: http://{{ waf_url }}/services/{{ svcname.json.id }}/url-policies
      method: POST
      user: "{{ token.json.token}}"
      password: ""
      force_basic_auth: yes
      body: '{"parse-urls-in-scripts": "Yes","enable-batd-scan": "No","host": "*","mode": "Active","enable-data-theft-protection": "No","web-scraping-policy": "{{ service_name }}_web_scraping_policy","rate-control-pool": "NONE","status": "On","url": "/index.html","name": "{{ service_name}}_anti_web_scraping","enable-bruteforce-prevention": "No","enable-virus-scan": "No"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      status_code: 201, 404, 406
      timeout: 60
    register: webscraping_name
  - debug:
     msg: "{{ webscraping_name.json}}"
