Goal: generate self-signed cert on the WAF, download a CSR, key stays on the waf, take CSR and get it signed, then upload the signed cert.  Key never leaves waf for obvious reasons.

I've got a few API calls in here, and some things I do in the GUI.

Step 1: Generate a Self-Signed cert for fastfood.com on the WAF.  I actually did this in the GUI, because that's how we did it on the phone call yesterday, wanted to keep same workflow.   In the postman collection sent yesterday are examples of generating it using the api if you want to use the api.

Step 2: Download the CSR. Can do in the gui of course, but here is the Api version:

Get Token.  This is a useful little token script, useful if I'm not using postman, because I don't want the long token in all my curl commands.  
I cat it out here just so you can see it, copy it if you like, if it may be useful to you.  It creates a file named token.txt that I can use with -K in subsequent curl calls.

brett@Azure:~$ cat bwaf_login.txt
curl http://<my waf>:8000/restapi/v3.1/login -X POST -H Content-Type:application/json -d '{"username": "<some name>", "password": "<some password>"}' > blah.txt
sed 's/"/ /g' < blah.txt | awk '{print "-u \"" $4 ":\"" }' > token.txt

brett@Azure:~$ chmod +X bwaf_login.txt
brett@Azure:~$ ./bwaf_login.txt
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   173    0   124  100    49   1031    407 --:--:-- --:--:-- --:--:--  1033
brett@Azure:~$

Now do a PUT to actually download the CSR:

brett@Azure:~$ curl -K token.txt -X PUT "http://<my waf>:8000/restapi/v3.1/certificates/self-signed-certificate/wolmarans.com?operation=download" -H "accept:application/json" -H "Content-Type: application/json" -d '{"download-type": "csr"}'
-----BEGIN CERTIFICATE REQUEST-----
MIIasdfasdfasdfasdfasdfBAQsFAAOBgQAPIyE5
0KX3Cax2XfOljSkk1RIj2jM6hQvDTywUFNm5vCB7PJIpEQtSTAQQ89V2J5bLA0Aa
+y0iuF5I2n9LZT1DfCPLW5zCotiYq9XLyXKgqW7Ys901Y2pnc1/+TwqSDzaln2xk
qdNepW6H/KBxbr4uIUPWt6WsXGqF57a9fz4fng==
-----END CERTIFICATE REQUEST-----.

Step 3: Take CSR to my CA and get it signed.  The CSR is just ascii text, so I just copy and paste that text to a file on my linux box that has my CA on it.  I am using openssl here, I don't have Venafi.  We are working on talk to Venafi about an integration, by the way, and I know that's something you are looking for.  Due to current events, it is slow-going getting a response from them.  I hope you understand, but we do intend to partner with them.  I completely understand the benefits of it as where I worked many of my customers had Venafi.
But for now, here is my openssl CA signing the CSR, and outputting a signed cert for fastfood.com

root@MSI:~/my_ssl_ca# openssl x509 -req -in wolmarans.com.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out wolmarans.com.crt -days 500 -sha256
Signature ok
subject=/C=us/ST=California/L=Campbell/O=Barracuda Networks/OU=Barracuda Networks/CN=wolmarans.com
Getting CA Private Key
Enter pass phrase for rootCA.key:
root@MSI:~/my_ssl_ca# cat wolmarans.com.crt
-----BEGIN CERTIFICATE-----
MIIDasdfasdfasdffBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0
ZDEasdfasdfasdfasdfasdfassP8xEgiI4YXXJBsXGCudsR
XhkAYgPcqasdfasdfasdfasdfasVBkqoLtY6mtfjTr8AN7FdB4FSX
hU2JasdfuJRE
-----END CERTIFICATE-----
root@MSI:~/my_ssl_ca#

Step 4: upload the signed cert. I used the GUI.   I called it wolmarans.com.signed 
Step 5: Associate the signed cert to my service, and test.  I am just using curl with -V, for verbose, we see it is signed by my openssl CA which is named root.example.com

root@MSI:~/my_ssl_ca# curl -k https://wolmarans.com -v
* Rebuilt URL to: https://wolmarans.com/
*   Trying 52.170.144.232...
* Connected to wolmarans.com (52.170.144.232) port 443 (#0)
* found 148 certificates in /etc/ssl/certs/ca-certificates.crt
* found 592 certificates in /etc/ssl/certs
* ALPN, offering http/1.1
* SSL connection using TLS1.2 / ECDHE_RSA_AES_256_GCM_SHA384
*        server certificate verification SKIPPED
*        server certificate status verification SKIPPED
*        common name: fastfood.com (matched)
*        server certificate expiration date OK
*        server certificate activation date OK
*        certificate public key: RSA
*        certificate version: #1
*        subject: C=US,ST=California,L=Campbell,O=Barracuda Networks,OU=Barracuda Networks,CN=wolmarans.com
*        start date: Fri, 27 Mar 2020 15:27:32 GMT
*        expire date: Sun, 26 Apr 2020 15:27:32 GMT
*        issuer: C=US,ST=CA,O=Internet Widgits Pty Ltd,CN=root.example.com
*        compression: NULL
* ALPN, server did not agree to a protocol
> GET / HTTP/1.1
> Host: fastfood.com
> User-Agent: curl/7.47.0
> Accept: */*
>
< HTTP/1.1 200 OK
