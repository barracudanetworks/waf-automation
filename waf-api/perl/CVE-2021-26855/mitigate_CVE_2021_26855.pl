#!/usr/bin/perl

use strict;

use Data::Dumper qw(Dumper);
use warnings;

use JSON::XS qw(encode_json decode_json);

my $waf_ip   = $ARGV[0];
my $waf_port = $ARGV[1] || 8000; 
my $username = $ARGV[2];
my $password = $ARGV[3];

my $login_token = `curl -s http://$waf_ip:$waf_port/restapi/v3/login -X POST -H Content-Type:application/json -d '{"username":"$username","password":"$password"}'`;
my $token_str = decode_json($login_token);

if (!defined $token_str->{token} && defined $token_str->{errors}) {
    my $error_msg = $token_str->{errors}->{msg};
    my $error_type = $token_str->{errors}->{type};
    print "$error_type:$error_msg.\n";
    exit 0;
}

$token_str = Data::Dumper::qquote($token_str->{token});
$token_str =~ s/"//g;

print "Login Successful.\n";
#print "Login token - ", $token_str, "\n";

#
#  Create global ADRs to deny specific Cookie patterns and URLs to mitigate CVE-2021-26855.
#
my $adr_base_url = "http://$waf_ip:$waf_port/restapi/v3/security-policies/owa/global-acls";
my $method = "POST";
my $content_type_header = "Content-Type:application/json";

my $result;
my $decoded_result;
my $config_error_msg = "ERROR: Exiting...Please contact Barracuda Support for more information.";
my $server_error_msg = "ERROR: Fatal error occurred when executing REST API call.";

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "Exchange-AnonCookie-CVE-2021-26855", "url": "/*", "extended-match": "(Header  Cookie rco X-AnonResource-Backend=.*\\\\/.*~.*)", "extended-match-sequence": 4, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            #exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "Exchange-ResourceCookie-CVE-2021-26855", "url": "/*", "extended-match": "(Header  Cookie rco X-BEResource=.*\\\\/.*~.*)", "extended-match-sequence": 5, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            #exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "themes-CVE-2021-26855", "url": "/owa/auth/Current/themes/resources*", "extended-match": "(Method eq POST) && (Header  User-Agent rco \\\".*(DuckDuckBot|facebookexternalhit|Baiduspider|Bingbot|Googlebot|Konqueror|Yahoo|YandexBot|antSword).*\\\")", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "ecp-CVE-2021-26855", "url": "/ecp/", "extended-match": "(Method eq POST) && (Header  User-Agent rco \\\".*(ExchangeServicesClient|python-requests).*\\\")", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "aspnetclient-CVE-2021-26855", "url": "/aspnet_client/", "extended-match": "(Method eq POST) && (Header  User-Agent rco \\\".*(antSword|Googlebot|Baiduspider).*\\\")", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "owa-CVE-2021-26855", "url": "/owa/", "extended-match": "(Method eq POST) && (Header  User-Agent rco \\\".*(antSword|Googlebot|Baiduspider).*\\\")", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "owaauth-CVE-2021-26855", "url": "/owa/auth/Current/", "extended-match": "(Method eq POST)", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "ecpdefault-CVE-2021-26855", "url": "/ecp/default.flt", "extended-match": "(Method eq POST)", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

$result = `curl -s $adr_base_url -X $method -H $content_type_header -d '{"name": "ecpcss-CVE-2021-26855", "url": "/ecp/main.css", "extended-match": "(Method eq POST)", "extended-match-sequence": 1, "action": "Deny and Log", "response-page": "default"}' -u "$token_str:"`;
eval {
    $decoded_result = decode_json($result);
};
if ($@) {
    print $server_error_msg."\n";
    exit 0;
} else {
    if ($decoded_result->{msg} && $decoded_result->{id}) {
        if ($decoded_result->{msg} =~ /Successful/) {
            print "Global ACL ".$decoded_result->{id}." ".$decoded_result->{msg}."\n";
        } else {
            print $decoded_result->{msg}."\n";
            print $config_error_msg."\n";
            exit 0;
        }
    }
}

print "Finished creating the relevant configuration successfully!\n";




1;
